# set $quota_policy       "";
# set $quota_limit        0;
# set $quota_remaining    0;
# set $quota_after        0;
set $user_id_quota_name "";
set $user_quota_name    "";
set $user_proxy_method  "";

default_type application/json;

location /_quota_validation {  
    # Check if quota-remaing is greater than 0.
    internal;
    js_content quota.validateQuota;
}

location /_quota_decrement {  
    # Decrease quota-remaining in key/value store and reset it after the
    # expiry time if the quota isn't disabled per a consumer.
    internal;
    js_content quota.decreaseQuota;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
}

location @quota_not_found {
    set $quota_msg '{"message": "quota config not found or internal error"}\n';
    include conf.d/quota_header.conf;
    return 404 $quota_msg;
}

location @too_many_requests {
    set $quota_msg '{"message": "quota exhausted"}\n';
    include conf.d/quota_header.conf;
    return 429 $quota_msg;
}

# location /quotas/ {
#     #proxy_pass http://my_quota_limiter_with_db/quotalimits/;
#     proxy_pass http://quota_limiter/quotas/;
#     access_log /var/log/nginx/access.log main;
# }

location /quotas {
    if ( $request_method = GET ) {
        js_content quota.getQuotaPolicy;
    }
    if ( $request_method = POST ) {
        js_content quota.createQuotaPolicy;
    }
    if ( $request_method = PUT ) {
        js_content quota.updateQuotaPolicy;
    }
    if ( $request_method = DELETE ) {
        js_content quota.deleteQuotaPolicy;
    }
    proxy_http_version 1.1;
    proxy_set_header Connection "";
}
