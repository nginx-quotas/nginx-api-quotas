js_import quota from quota/quotas.js;

log_format quota_fmt '$remote_addr - $remote_user [$time_local] "$request" $status '
                     ' consumer=$quota_id limit=$user_quota_limit quota=$user_quota_remaining';

map $cookie_user_id $x_user_id {
    default $cookie_user_id;
}

map $cookie_user_id $quota_id {
    default $cookie_user_id;
}

map $x_user_id $quota_id {
    default $x_user_id;
}

# TODO: Group Policy
#
# map $group_quota_policy $limit_per {
#     # quota policy to request per the specific period for a specific group
#     # r/M: per Month, r/D: per Day, r/h: per hour, r/m: per minute, r/s: per sec
#     #
#     default              1000r/M; # 1000 requests per Month
#     #group_quota_chat    2000r/D; # 2000 requests per Day  
#     #group_quota_storage 3000r/h; # 3000 requests per Hour 
# }
# 
map $user_quota_name $quota_limit_per {
    # quota policy to request per the specific period for a specific user
    # r/M: per Month, r/D: per Day, r/h: per hour, r/m: per minute, r/s: per sec
    #
    # Quota Name Convention = policy-type:proxy-name:api-method:pay-method
    "USR:image-api:R:F" "1000r/M"; # 1000 requests per month
    "USR:image-api:W:B" "2000r/M"; # 2000 requests per month
    "USR:image-api:A:B" "2000r/M"; # 2000 requests per month
    "USR:chats-api:A:S" "3000r/M"; # 3000 requests per month
}

map $user_proxy_method $quota_payment_method {
    "b5cdf854-fc9b-4fad-aff0-9d5074ea79ed:image-api:R" "F";
    "user-01:image-api:R"   "F"; # Free
    "user-01:image-api:W"   "B"; # Bronze
    "user-02:image-api:A"   "S"; # Silver
    "user-03:chats-api:R"   "G"; # Gold
    "user-04:chats-api:W"   "G"; # Gold
}

# map $apikey_proxy_method $quota_payment_method {
#     "api-key-01:chat-api:R"   "F"; # Free
#     "api-key-02:chat-api:W"   "G"; # GOLD
# }


map $host $quota_storing_option {
    # Option of where to store API quotas policy and status
    default     0; # stand-alone w/ NGINX Key/Value store
    #           1: # remote Key/Value store
}

map $host $quota_exhausted_option {
    # Option of how to handle when the quota is exhausted
    default     0; # return 409 (too many requests) for strict enforcement (reject requests)
   #example.com 1; # return 204 and handle requests over the usage limit (monitor and notify)
}

map $host $quota_consistency_option {
    # Option to handle consistency between API request and Quotas management.
    #
    # - eventual consistency
    #   + It quickly checks if quota-remaining is valid in a k/v store and send
    #     a message to the queue of quota-decrement service via the thread pool
    #     without waiting until quota is synchronized among API gateway clusters.
    #   + It allows quota-remaining differences among API gateway clusters until
    #     each quota data is fully synchronized. But the data is eventually
    #     consistent in the K/V store.
    #   + Because API Quotas isn't to avoid the security vulnerability
    #     such as DDos atack, and it should not block API latency.
    #
    # - strong consistency (TBD if needed based on the priority)
    #   + This is not recommended option as it blocks API latency
    #   + But, NGINX waits until the quota-decrement completes in the K/V store
    #     among API gateways and remote data source if wanting this option.
    #
    default     0; # eventual consistency
   #example.com 1; # strong   consistency 
}
# keyval_zone zone=quota_limit:1M  state=/xxx/quota_limit.json  sync;
# keyval_zone zone=quota_status:1M state=/xxx/quota_status.json sync timeout=32d;

# keyval $api_key_quota_name $quota_limit  zone=quota_limit;
# keyval $api_key_quota_name $quota_status zone=quota_status;

# These are to manage quota key/value store for NGINX Plus.
keyval_zone zone=user_quota_limit:1M       state=/var/lib/nginx/state/quota/user_quota_limit.json;
keyval_zone zone=user_quota_remaining:1M   state=/var/lib/nginx/state/quota/user_quota_remaining.json   timeout=32d;
keyval_zone zone=user_quota_start_time:1M  state=/var/lib/nginx/state/quota/user_quota_start_time.json  timeout=32d;
keyval_zone zone=user_quota_last_update:1M state=/var/lib/nginx/state/quota/user_quota_last_update.json timeout=32d;
keyval_zone zone=user_quota_expiry_time:1M state=/var/lib/nginx/state/quota/user_quota_expiry_time.json timeout=32d;

keyval $user_id_quota_name $user_quota_limit       zone=user_quota_limit;
keyval $user_id_quota_name $user_quota_remaining   zone=user_quota_remaining;
keyval $user_id_quota_name $user_quota_start_time  zone=user_quota_start_time;
keyval $user_id_quota_name $user_quota_last_update zone=user_quota_last_update;
keyval $user_id_quota_name $user_quota_expiry_time zone=user_quota_expiry_time;



# ===================================
# Quota Policy Data Structure for ACM
# ===================================
#
# +------------+------------+------------+----------------+-------------+---------------+--------------------------------------------------+
# | quota-type | proxy-name | api-method | payment-method | quota-limit | limit-per     | description                                      |
# +------------+------------+------------+----------------+-------------+---------------+--------------------------------------------------+
# | USR        | image-api  | R, W, or A | F, B, S, or G  |  1000       | r/h, r/D, r/M | freemium user quota policy for reading image-api |
# | USR        | chat-api   |            |                |             |               |                                                  |
# | GRP        | image-api  |            |                |             |               |                                                  |
# | GRP        | N/A        |            |                |             |               |                                                  |
# | GLO        | N/A        |            |                |             |               |                                                  |
# +------------+------------+------------+----------------+-------------+---------------+--------------------------------------------------+
#
# policy-type:
# - USR: User   quota (w/ sub   claim in access token)
# - GRP: Group  quota (w/ group claim in access token)
# - GLO: Global quota
# - example:
#                    F5 (Global)
#                         |
#             +-----------+-----------+
#             |                       |
#    NGINX-ACM (Group 1)  ....  NGINX-XXX (Group n)
#             |
#       +-----+----+
#       |          | 
#    User 1  ...   k
#
#
# api-method:
# - R: Read  (GET, HEAD, OPTIONS)
# - W: Write (POST, PUT, PATCH, DELETE)
# - A: All methods
# - [ (R), (W), (R, W), or (A) ]
#
# payment-method:
# - F: Free, B: Bronze, S: Silver, G: Gold
#
# limit-per:
# - r/h: requests per hour
# - r/D: requests per day
# - r/M: requests per month
#
# 
# =========================== 
# Quota Policy for NGINX Map
# =========================== 
# 
# - key: "quota-type:api-method:payment-method:proxy-name"
# - val: "quota-limit" + "limit-per"
# - example:
#   +--------------------------+------------------+
#   | $user_quota_name         | $quota_limit_per |
#   +--------------------------+------------------+
#   | "USR:R:F:image-api"      | 1000r/M          |
#   | "USR:W:B:image-api"      | 2000r/M          |
#   | "USR:A:S:chat-api"       | 3000r/M          |
#   +--------------------------+------------------+


# =======================================
#  Quota Limit & Remaining for NGINX Map
# =======================================
#
# keyval_zone zone=user_quota_limit_zone:1M    state=/var/run/nginx-quota/user_quota_limit.json  timeout=32d;
# keyval $user_id_quota_name $user_quota_limit zone=user_quota_limit_zone;
#

# ===================================
# Quota Policy per API per User
# ===================================
#
#  +----------+-----------+-------------------+--------------------
#  | sub      | proxy     | quota policy      | quota limit per
#  +----------+-----------+-------------------+--------------------
#  | user-01  | image-api | USR:R:F:image-api | 1000r/M
#  | user-02  | image-api | USR:W:B:image-api | 1000r/M
#  | user-03  | image-api | USR:A:B:image-api | 1000r/M
#  +----------+-----------+-------------------+--------------------
#

# ================================ 
# Quota Policy for NGINX Locaiton
# ================================ 
#
# server {
#     set $proxy_name               "image-api"
#     set $user_quota_proxy_enable  1;
#     set $group_quota_proxy_enable 1;
#     location aaa {
#         if ( $request_method !~ ^(GET|HEAD|OPTIONS)$ ) {
#             set $user_quota_proxy_read_enable  1;
#         }
#         if ( $request_method !~ ^(POST|PUT|DELETE)$ ) {
#             set $user_quota_proxy_write_enable 1;
#         }
#         auth_request /_quota_decrement;
#            # generate $user_quota_name
#            # read $user_quota_limit
#     }
# }

# server {
#     set $proxy_name              "chat-api"
#     set $user_quota_name  "USR:A:S:chat-api";
#     set $group_quota_policy_name "GRP:A:S:N/A";
#     location bbb {
#         :
#         auth_request /_quota_decrement;
#     }
# }

# TODO: JSON DB per user quota policy
#
# {
#     "user-01:user_quota_image_write_free": { 
#        "quota_limit"    : 2000,
#        "quota_remaining": 1000,
#        "start_time"     : 1678936439.697481,
#        "last_update"    : 1679936439.697481,
#        "expiry_time"    : 1681528439.697481,
#     }
# }

# TODO: Group & Global Quota
# keyval_zone zone=group_quota_limit:1M  state=/var/run/nginx-quota/group_quota_limit.json;
# keyval $jwt_claim_sub:$group_quota_policy_name $group_quota_limit zone=group_quota_limit;

# keyval_zone zone=global_quota_limit:1M state=/var/run/nginx-quota/global_quota_limit.json;
# keyval $jwt_claim_sub:$global_quota_policy_name $global_quota_limit zone=global_quota_limit;
