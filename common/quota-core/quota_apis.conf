default_type application/json;

location = /_quota_validation {  
    # Check if the quota remains, or if it is expired.
    internal;
    js_content quota.validateQuota;
}

location = /_quota_decrement {  
    # Decrease quota-remaining in key/value store and reset it after the
    # expiry time if the quota isn't disabled per a consumer.
    internal;
    js_content quota.decreaseQuota;
    # proxy_pass http://quota_decrement_service;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
}

location @quota_error {
    internal;
    status_zone "Quota error";
    js_content quota.error;
}

# location /quotas/ {
#     #proxy_pass http://my_quota_limiter_with_db/quotalimits/;
#     proxy_pass http://quota_limiter/quotas/;
#     access_log /var/log/nginx/access.log main;
# }

# location /quotas {
#     if ( $request_method = GET ) {
#         js_content quota.getQuotaPolicy;
#     }
#     if ( $request_method = POST ) {
#         js_content quota.createQuotaPolicy;
#     }
#     if ( $request_method = PUT ) {
#         js_content quota.updateQuotaPolicy;
#     }
#     if ( $request_method = DELETE ) {
#         js_content quota.deleteQuotaPolicy;
#     }
#     proxy_http_version 1.1;
#     proxy_set_header Connection "";
# }
